# Issue 1

# Prompts for a number, takes that number, adds 2, multiplies by 3, subtracts 6, and divides by 3. 

# Inputs user entered string and converts it to integer
# Returns calculation
def provided_calculation(x):
    return (((int(x)+2)*3)-6)/3

# Asks user for Input and Prints Result
def issue_1():
    user_input_issue_1 = input("Please enter a number: ")
    print(f"\nUser Inputted: {user_input_issue_1}")
    print(f"Program Outputted: {provided_calculation(user_input_issue_1)}")

# Issue 2

# Customer needs to know what happens when you execute the following code groups
def issue_2():
    my_var1 = 7.0 
    my_var2 = 5 
    print(my_var1 % my_var2) 

    x = 4 
    y = 5 
    print(x//y) 
 
    30-3**2+8//3**2*10 

# Issue 3

# Prompt for input and then print the input as a string, an integer, and a float-point value. What values can you input and print without errors being generated?
def issue_3():
    # Gets input from user as type string
    user_input_issue_3 = input("Please input a number or 0 to stop: ")

    # Loops while user input is not 0
    # Program tries to print parsed input and catches exceptions
    # Print any errors we get to the user
    while(user_input_issue_3 != "0"):
        try:
            print(str(user_input_issue_3))
        except ValueError as ex:
            print(ex)
        
        try:
            print(int(user_input_issue_3))
        except ValueError as ex:
            print(ex)
        
        try:
            print(float(user_input_issue_3))
        except ValueError as ex:
            print(ex)
            
        user_input_issue_3 = input("Please input a number or 0 to stop: ")
    
# Issue 4

# Customer needs to know if there is a difference in the output of the following expressions, marked a through c :

# There is a difference between a and c
# Paranthesis always go first
def issue_4():
    print("(a) "+str(2**2**3))
    print("(b) "+str(2**(2**3)))
    print("(c) "+str((2**2)**3))

# Issue 5

# Customer needs a ‘game of chance’ simulation to do the following:
# (a) build and populate treasure chest with as many items customer requires
# (b) create a bank / loot stash
# (c) wagers to be placed per “spin” or treasure chest “grab”
# (d) customer “plays” until bank account reaches 0 or below.

# Imports the random module
import random as r   

# Console Title Generated By https://patorjk.com/software/taag/#p=display&f=Graffiti&t=Type%20Something%20
def title():
    print()
    print("/$$$$$$$$                                                                           /$$   /$$                       /$$")                        
    print("|__  $$__/                                                                         | $$  | $$                      | $$")                        
    print("   | $$  /$$$$$$   /$$$$$$   /$$$$$$   /$$$$$$$ /$$   /$$  /$$$$$$   /$$$$$$       | $$  | $$ /$$   /$$ /$$$$$$$  /$$$$$$    /$$$$$$   /$$$$$$") 
    print("   | $$ /$$__  $$ /$$__  $$ |____  $$ /$$_____/| $$  | $$ /$$__  $$ /$$__  $$      | $$$$$$$$| $$  | $$| $$__  $$|_  $$_/   /$$__  $$ /$$__  $$")
    print("   | $$| $$  \__/| $$$$$$$$  /$$$$$$$|  $$$$$$ | $$  | $$| $$  \__/| $$$$$$$$      | $$__  $$| $$  | $$| $$  \ $$  | $$    | $$$$$$$$| $$  \__/")
    print("   | $$| $$      | $$_____/ /$$__  $$ \____  $$| $$  | $$| $$      | $$_____/      | $$  | $$| $$  | $$| $$  | $$  | $$ /$$| $$_____/| $$")      
    print("   | $$| $$      |  $$$$$$$|  $$$$$$$ /$$$$$$$/|  $$$$$$/| $$      |  $$$$$$$      | $$  | $$|  $$$$$$/| $$  | $$  |  $$$$/|  $$$$$$$| $$")      
    print("   |__/|__/       \_______/ \_______/|_______/  \______/ |__/       \_______/      |__/  |__/ \______/ |__/  |__/   \___/   \_______/|__/")      
                                                                                                                                                
# Where the program starts                                                                                                                        
def start_up():
    title()
    print("\n\nWelcome to Treaure Hunter!")
    print("You will either walk to the bank or walk the plank!")
    main_menu(["Gold"], 0.00)

# Main user menu to choose whether to
# - Edit Chest
# - Add Funds
# - Place Bet
# - Exit
def main_menu(chest, bank):
    menu_choice = input(
        "\nEnter 1 to edit chest\nEnter 2 to add funds to your Bank\nEnter 3 to place bet and spin\nEnter 4 to exit\n"
    )
    
    if(menu_choice == '1'):
        edit_chest(chest, bank)
    elif(menu_choice == '2'):
        add_funds(chest,bank)
    elif(menu_choice == '3'):
        place_bet(bank, chest)
    elif(menu_choice == '4'):
        print("\nThank you for playing!")
        title()
        quit()
    else:
        print(f"{menu_choice} is not a valid choice please try again!")
        main_menu(chest,bank)

# Prints Chest In a More Readable Form
def print_chest(chest):
    i = 0
    print("\nChest Contents:")
    for item in chest:
        print(f"| {i+1}: {item}")
        i+=1
    print()

#Prints Formatted Bank Balance
def print_bank(bank):
    print("Account Balance: ${:.2f}\n".format(bank))

# Sub Menu that lets user interact with chest
# - Add Item
# - Remove Item
# - Empty Chest
# - Main Menu
def edit_chest(chest, bank):
    print_chest(chest)    
    menu_choice = input(
        "Enter 1 to add item to chest\nEnter 2 to remove item from chest\nEnter 3 to empty chest\nEnter 4 to exit to main menu\n"
    )
    
    if(menu_choice == '1'):
        add_item_to_chest(chest, bank)
    elif(menu_choice == '2'):
        remove_item_from_chest(chest, bank)
    elif(menu_choice == '3'):
        empty_chest(chest, bank)
    elif(menu_choice == '4'):
        main_menu(chest, bank)
    else:
        print(f"{menu_choice} is not a valid choice please try again!")
        edit_chest(chest, bank)

# Allows user to add any amount of items to chest
# No duplicates allowed
# User Inputs "Gold" to exit since they may not add gold
def add_item_to_chest(chest, bank):
    item = ""
    while(item.lower() != "gold"):
        print_chest(chest)
        item = input("Enter item to be added and enter Gold when done\n")
        if(item.lower() == "gold"):
            edit_chest(chest, bank)
        elif (item not in chest):
            chest.append(item)
            print(f"\n{item} added!\n")
        else:
            print(f"\n{item} already exists in chest!\n")
    edit_chest(chest, bank)

# Allows user to remove any amount of items from chest
# User must input correct name of item   
# Note "Gold" cannot be removed    
def remove_item_from_chest(chest, bank):
    item = ""
    while(item.lower() != "gold"):
        print_chest(chest)
        item = input("Enter item name to be removed and enter Gold when done\nNote: Gold Connot Be Removed\n")
        if item.lower() == "gold":
            edit_chest(chest, bank)
        if item in chest:
            chest.pop(chest.index(item))
            print(f"\n{item} removed!\n")
        else:
            print(f"\n{item} doesnt exist in chest!\n")
    edit_chest(chest, bank)

# Empties all user entered items from chest
# Note "Gold" cannot be removed
def empty_chest(chest, bank):
    chest = []
    chest.append("Gold")
    print("Chest Emptied! Gold cannot be removed!\n")
    edit_chest(chest, bank)

# Allows user to add funds to account so they can play with
def add_funds(chest,bank):
    print_bank(bank)
    deposit = input("Enter the amount you would like to add to your account\n$")
    bank+=float(deposit)
    print("You have successfully deposited ${:.2f}\n".format(float(deposit)))
    print_bank(bank)
    main_menu(chest, bank)

# Randomly chooses a item from chest and returns it
def spin(chest):
    return r.choice(chest)

# Validates that user has enough money in the bank to place bet
# Prompts user to reenter if not
def bank_validation(bet,bank):
    g = True
    while g:
        if(float(bet) <= bank):
            g = False
        else:
            print("Insufficent Funds!")
            bet = input(
                "You have ${:.2f} in your account\nPlease Bet Again\n$"
                .format(float(bank)))
    return bet

# Allows user to place another bet and spin or go to main menu
def play_again(bank, chest):
    play = input("Would you like to play again (y or n)\n")
    if(play.lower() == "y" or play.lower() =="yes"):
        place_bet(bank, chest)
    else:
        main_menu(chest, bank)  

# Collects bet from user and validates it
# Spins the wheele
# If wheel hits gold users are paid out
# Pay outs: Bet multiplied by the amount of items in chest minus the gold piece
# If wheel hits not gold user loses bet
def place_bet(bank, chest):
    bet = input("How much would you like to bet\n$")
    bet = bank_validation(bet,bank)
    input("Press return to spin!")
    s = spin(chest)
    if(s == "Gold"):
        bank+=float(bet)*(len(chest)-1)
        print("\nYou struck Gold!\n")
        print("You win ${:.2f}\n".format(float(bet)))
        print("Your current balance is ${:.2f}\n".format(float(bank)))
    else:
        bank-=float(bet)
        print("\nBetter Luck Next Time!")
        print("Your current balance is ${:.2f}\n".format(float(bank)))
    play_again(bank, chest)

def issue_5():
    start_up()

# Issue 6

# Customer needs a password simulator to do the following:
# (a) create random passwords in perpetuity
# (b) if the password is “acceptable,” it gets archived
# (c) “unaccepted” passwords get deleted
# (d) no less than 40 iterations

import random as r

# Program Starts Here
# Rock You Text File (infamous text file containing millions of passwords)
# Generates 40 passwordds
# Passwords are generated in length 20 characters to 29 characters
# Validates password and adds it to the password manager 
# Password Manager will be returned to user
def generate_password():
    password_manager = []
    rock_file = open("rockyou.txt", errors="ignore")
    rockyou = rock_file.read().split('\n')
    rock_file.close()
    for i in range(0,40):
        length = r.randint(20,30)
        password = ""
        for i in range(length):
            password+=chr(r.randint(32,123))
        if(validation(password, rockyou)):
            password_manager.append(password)
    return password_manager

# Validates Passwords to meet the special character requirement and uniqueness requirement
def validation(password, rockyou):
    if(validate_special_character(password) and validate_unique(password,rockyou)):
        return True
    else:
        return False

# Validates that password contains a non alpha numeric character
# Returns a boolean
def validate_special_character(password):
    for i in range(len(password)):
        if(not password[i].isalnum()):
            return True
    print("Special Character Fail")
    return False

# Validates that password does not exist in Rock You Data Set
# Returns a boolean
def validate_unique(password, rockyou):
    for word in rockyou:
        if(word == password):
            return False
    return True

def issue_6():
    for password in generate_password():
        print(password)

# Switches between issues
def control():
    issue = input("Which Issue Do you want to Review: ")
    if(issue == '1'):
        issue_1()
    elif(issue == '2'):
        issue_2()
    elif(issue == '3'):
        issue_3()
    elif(issue == '4'):
        issue_4()
    elif(issue == '5'):
        issue_5()
    elif(issue == '6'):
        issue_6()
    else:
        print(f"{issue} is not a valid entry!\n Please run again!")

control()